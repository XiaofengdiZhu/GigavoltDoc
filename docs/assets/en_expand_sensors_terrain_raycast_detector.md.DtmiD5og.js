import{E as i,a,b as r,c,I as t}from"./chunks/ElectricConnectionTable.BnFVfk2b.js";import{E as h}from"./chunks/ElectricElement.ByEg-ig9.js";import{d as p,o as f,c as m,j as n,a as o,G as s,k as u,B as w}from"./chunks/framework.C-GLQy3h.js";import"./chunks/locale.DUWwBpDx.js";const k={id:"terrain-raycast-detector",tabindex:"-1"},C=JSON.parse('{"title":"Terrain Raycast Detector","description":"","frontmatter":{},"headers":[],"relativePath":"en/expand/sensors/terrain_raycast_detector.md","filePath":"en/expand/sensors/terrain_raycast_detector.md"}'),y={name:"en/expand/sensors/terrain_raycast_detector.md"},T=p({...y,setup(b){let l=[new i(a.Top,r.Output,c.BitWidth,[new t(1,32,"Block Value","The value of the nearest block detected")]),new i(a.Right,r.Input,c.BitWidth,[new t(1,12,"Detection Distance","Set how many blocks should the detector detect. When this is 0, the detector will not do anything."),new t(13,13,"Whether Check Block Data","See`Specify Block Data`"),new t(14,14,"Whether Ignore Fluid","If this is 1, the detector will ignore fluid blocks like water and magma.  \nThis option has higher priority than`Specify Block Content`"),new t(15,32,"Empty","No effect.")]),new i(a.Bottom,r.Output,c.BitWidth,[new t(1,32,"Result Distance","The distance of nearest block detected, in blocks.")]),new i(a.Left,r.Input,c.BitWidth,[new t(1,10,"Specify Block Content","If this is greater than 0, the detector will only detect the block with the same block content."),new t(11,14,"Empty","No effect."),new t(15,32,"Specify Block Data","If`Specify Block Content`is greater than 0 and`Whether Check Block Data`is 1, the detector will also check whether the data of block equals to this.")]),new i(a.In,r.Output,c.BitWidth,[new t(1,32,"Continuous Count","If the block, which meets the conditions, is detected, the detector will continue detecting until a block not the first one.")])];return(B,e)=>{const d=w("Badge");return f(),m("div",{"data-pagefind-body":!0},[n("h1",k,[e[0]||(e[0]=o("Terrain Raycast Detector ")),s(d,{text:"v1.0",type:"info"}),e[1]||(e[1]=o()),e[2]||(e[2]=n("a",{class:"header-anchor",href:"#terrain-raycast-detector","aria-label":'Permalink to "Terrain Raycast Detector <Badge text="v1.0" type="info"/>"'},"​",-1))]),e[3]||(e[3]=n("h2",{id:"overview",tabindex:"-1"},[o("Overview "),n("a",{class:"header-anchor",href:"#overview","aria-label":'Permalink to "Overview"'},"​")],-1)),e[4]||(e[4]=n("p",null,[o("When any input changes, the detector will detect the blocks in the direction it faces, then return the distance and other information. You can also specify which block to detect. The"),n("code",null,"Detection Distance"),o("must be set to a positive integer.")],-1)),e[5]||(e[5]=n("h2",{id:"ports-definition",tabindex:"-1"},[o("Ports Definition "),n("a",{class:"header-anchor",href:"#ports-definition","aria-label":'Permalink to "Ports Definition"'},"​")],-1)),s(h,{imgAltPrefix:"Terrain Raycast Detector",connections:u(l),imgSrc:"/images/expand/sensors/GVTerrainRaycastDetectorBlock.webp"},null,8,["connections"])])}}});export{C as __pageData,T as default};
