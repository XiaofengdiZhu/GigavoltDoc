import{E as a,a as o,b as n,c as i,I as t}from"./chunks/ElectricConnectionTable.BmTUByVO.js";import{E as s}from"./chunks/ElectricElement.BefNTKrd.js";import{d as f,B as y,c as u,o as w,j as l,a3 as h,G as r,a as d,k as m}from"./chunks/framework.CM9Y3eBy.js";import"./chunks/locale.Exah1bWg.js";const k={id:"memory-banks-operator",tabindex:"-1"},S=JSON.parse('{"title":"Memory Banks Operator","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"en/expand/memory_banks/memory_banks_operator.md","filePath":"en/expand/memory_banks/memory_banks_operator.md"}'),g={name:"en/expand/memory_banks/memory_banks_operator.md"},T=f({...g,setup(x){let p=[new a(o.Top,n.Output,i.Hide,[new t(1,32,"Result Memory Bank ID (Any Type)","")],!1,!0),new a(o.Right,n.Input,i.Hide,[new t(1,32,"Right Memory Bank ID","")],!1,!0),new a(o.Bottom,n.Input,i.Hide,[new t(1,32,"Synchronous Operations, details are in the table below.","")],!1,!0),new a(o.Left,n.Input,i.Hide,[new t(1,32,"Left Memory Bank ID","")],!1,!0),new a(o.In,n.Input,i.Hide,[new t(1,32,"Parameter of Synchronous Operations","")],!1,!0)],c=[new a(o.Top,n.Output,i.Hide,[new t(1,32,"Result Memory Bank ID (Any Type, **Required**)","")],!1,!0),new a(o.Right,n.Input,i.StartAndEnd,[new t(1,8,"X Range",`For each 1 increase of this, the end position moves west by 1 block.  
The origin of end position offset is the start position.`),new t(9,16,"Y Range","For each 1 increase of this, the end position moves up by 1 block."),new t(17,24,"Z Range","For each 1 increase of this, the end position moves north by 1 block."),new t(25,25,"X Range Sign","If this is 1, the end position moves east but not west."),new t(26,26,"Y Range Sign","If this is 1, the end position moves down but not up."),new t(27,27,"Z Range Sign","If this is 1, the end position moves south but not north."),new t(28,32,"Empty","No effect.")]),new a(o.Bottom,n.Input,i.Hide,[new t(1,32,"When this changes to 256 V (0x100), the Memory Banks Operator will try to initialize.","")],!1,!0),new a(o.Left,n.Input,i.Hide,[new t(1,32,"Template Memory Bank ID","")],!1,!0),new a(o.In,n.Input,i.StartAndEnd,[new t(1,8,"X Offset",`For each 1 increase of this, the start position moves west by 1 block.  
The origin of start position offset is the position of this Memory Banks Operator.`),new t(9,16,"Y Offset","For each 1 increase of this, the start position moves up by 1 block."),new t(17,24,"Z Offset","For each 1 increase of this, the start position moves north by 1 block."),new t(25,25,"X Offset Sign","If this is 1, the start position moves east but not west."),new t(26,26,"Y Offset Sign","If this is 1, the start position moves down but not up."),new t(27,27,"Z Offset Sign","If this is 1, the start position moves south but not north."),new t(28,28,"Don't Output Result","If this is 1, the result will not be output to the result memory bank<br/>No matter whether it outputs result, you must set an available memory bank id."),new t(29,29,"Whether Overwrite","If this is 1, it will overwrite the memory banks that already have data."),new t(30,32,"Empty","No effect.")])];return(v,e)=>{const b=y("Badge");return w(),u("div",{"data-pagefind-body":!0},[l("h1",k,[e[0]||(e[0]=d("Memory Banks Operator ")),r(b,{text:"v1.0",type:"info"}),e[1]||(e[1]=d()),e[2]||(e[2]=l("a",{class:"header-anchor",href:"#memory-banks-operator","aria-label":'Permalink to "Memory Banks Operator <Badge text="v1.0" type="info"/>"'},"â€‹",-1))]),e[3]||(e[3]=h("",7)),r(s,{imgAltPrefix:"Memory Banks Operator",connections:m(p),imgSrc:"/images/expand/memory_banks/GVMemoryBanksOperatorBlock.webp",titleLevel:4,serial:1},null,8,["connections"]),e[4]||(e[4]=h("",6)),r(s,{imgAltPrefix:"Memory Banks Operator",connections:m(c),imgSrc:"/images/expand/memory_banks/GVMemoryBanksOperatorBlock.webp",titleLevel:4,serial:2},null,8,["connections"])])}}});export{S as __pageData,T as default};
