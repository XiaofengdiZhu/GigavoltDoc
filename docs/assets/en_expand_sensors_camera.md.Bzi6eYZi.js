import{_ as m}from"./chunks/GVCameraBlock0.ASC7OrOD.js";import{E as o,a,b as n,c as i,I as e}from"./chunks/ElectricConnectionTable.BmTUByVO.js";import{E as d}from"./chunks/ElectricElement.BefNTKrd.js";import{U as f}from"./chunks/UintColorConverter.CcxVp72b.js";import{d as g,B as w,c as b,o as u,j as r,a3 as l,G as s,a as h,k as _}from"./chunks/framework.CM9Y3eBy.js";import"./chunks/locale.Exah1bWg.js";const v={id:"camera",tabindex:"-1"},y={class:"details custom-block"},A=JSON.parse('{"title":"Camera","description":"","frontmatter":{},"headers":[],"relativePath":"en/expand/sensors/camera.md","filePath":"en/expand/sensors/camera.md"}'),T={name:"en/expand/sensors/camera.md"},D=g({...T,setup(I){let c=[new o(a.Top,n.Input,i.StartAndEnd,[new e(1,8,"View Angle","In degree."),new e(9,16,"Empty","No effect."),new e(17,32,"Y Offset","For each 1 increase of this, the position of the camera moves up by 1/8 block. If the highest bit of this is 1, moving down instead.")]),new o(a.Right,n.Input,i.StartAndEnd,[new e(1,16,"X Offset","For each 1 increase of this, the position of the camera moves north by 1/8 block. If the highest bit of this is 1, moving south instead."),new e(17,32,"Z Offset","For each 1 increase of this, the position of the camera moves east by 1/8 block. If the highest bit of this is 1, moving west instead.")]),new o(a.Bottom,n.Input,i.StartAndEnd,[new e(1,8,"Yaw","Set the yaw angle of the camera, in degree."),new e(9,16,"Pitch","Set the pitch angle of the camera, in degree."),new e(17,24,"Roll","Set the roll angle of the camera, in degree."),new e(25,25,"Yaw Sign","If this is 1, the yaw angle will be negative."),new e(26,26,"Pitch Sign","If this is 1, the pitch angle will be negative."),new e(27,27,"Roll Sign","If this is 1, the roll angle will be negative."),new e(28,32,"Empty","No effect.")]),new o(a.Left,n.Input,i.BitWidth,[new e(1,16,"Image Height","Not greater than 8192 (0x2000) is recommended."),new e(17,32,"Image Width","Not greater than 8192 (0x2000) is recommended.")]),new o(a.In,n.Input,i.BitWidth,[new e(1,32,"Memory Bank ID","Set the ID of a memory bank that you want to store the photo in. The pixels will be converted to data in ABGR color mode.")])];return(k,t)=>{const p=w("Badge");return u(),b("div",{"data-pagefind-body":!0},[r("h1",v,[t[0]||(t[0]=h("Camera ")),s(p,{text:"v2.0"}),t[1]||(t[1]=h()),t[2]||(t[2]=r("a",{class:"header-anchor",href:"#camera","aria-label":'Permalink to "Camera <Badge text="v2.0"/>"'},"​",-1))]),t[4]||(t[4]=l('<h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>For taking photos, there are two types:</p><h2 id="simple-type" tabindex="-1">Simple Type <a class="header-anchor" href="#simple-type" aria-label="Permalink to &quot;Simple Type&quot;">​</a></h2><img alt="The Image of The Simple Camera" src="'+m+'" class="center_image small"><p>Input the ID of the memory bank that you want to store the photo in, and the camera will take a photo towards the direction that block faces to. The view angle is 90 degrees, and the resolution is 512×512.</p><blockquote><p>The final input is generated by performing a bitwise OR operation between the inputs from all ports.</p></blockquote><h2 id="complex-type" tabindex="-1">Complex Type <a class="header-anchor" href="#complex-type" aria-label="Permalink to &quot;Complex Type&quot;">​</a></h2><p>You can control all parameters of the camera. The Details are below.</p><h3 id="ports-definition" tabindex="-1">Ports Definition <a class="header-anchor" href="#ports-definition" aria-label="Permalink to &quot;Ports Definition&quot;">​</a></h3>',9)),s(d,{imgAltPrefix:"Complex Camera",connections:_(c),imgSrc:"/images/expand/sensors/GVCameraBlock1.webp",titleLevel:4},null,8,["connections"]),t[5]||(t[5]=l('<div class="info custom-block github-alert"><p class="custom-block-title">💡 Tip</p><p>The offset ranges of each direction are all ±4095.875.</p></div><div class="tip custom-block github-alert"><p class="custom-block-title">📝 ABGR Color Mode</p><p>From high to low bits，every 8 bits represents the color&#39;s <span style="opacity:0.6;">Alpha chanel</span>、<span style="color:blue;">Blue chanel</span>、<span style="color:green;">Green chanel</span>、<span style="color:red;">Red chanel</span>. You can use the tool below to convert.</p></div>',2)),r("details",y,[t[3]||(t[3]=r("summary",null,"🛠️ Voltage Color Converter",-1)),s(f)])])}}});export{A as __pageData,D as default};
