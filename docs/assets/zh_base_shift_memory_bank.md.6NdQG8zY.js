import{d as l,o as d,c,j as e,a,I as o,a5 as t,D as s,av as n}from"./chunks/framework.CZYz2WcB.js";import{U as i}from"./chunks/UintColorConverter.CuD6zLjx.js";import"./chunks/locale.CB2Y0rC6.js";const h={id:"存储器",tabindex:"-1"},p=e("a",{class:"header-anchor",href:"#存储器","aria-label":'Permalink to "存储器 <Badge text="v1.0" type="info"/>"'},"​",-1),m=t('<img src="'+n+'" alt="GV存储器 图示" class="center_image small"><h2 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h2><p>能够存储数据的元件，该元件的端口定义与原版相同，不再复述，区别如下：</p><ul><li>必须先设置存储器的宽、高完成初始化后方可存储数据，设置后无法修改宽、高（但可能被其他操作覆盖）</li><li>宽、高上限提高到了 2<sup>32</sup>-1，两者乘积不得超过 2<sup>32</sup>-1</li><li>各输入端均未连接元件或导线时，上端将输出该存储器的ID</li><li>编辑时，每个数据用英文逗号<code>,</code>分开，每行数据用英文分号<code>;</code>分开，数据量时建议导出后编辑</li><li>可在编辑界面导出/导入数据，导出的文件为 <a href="https://www.w3.org/TR/png/" target="_blank" rel="noreferrer">PNG</a> 格式的图片</li><li>除了能导入 <a href="https://www.w3.org/TR/png/" target="_blank" rel="noreferrer">PNG</a> 格式图片，还能导入<code>PCM</code>编码的<code>WAV</code>格式的音频文件、其他文件，详见下文</li></ul><blockquote><p>附失败的在线编辑器<a href="https://xiaofengdizhu.github.io/GVMBEditor" target="_blank" rel="noreferrer">https://xiaofengdizhu.github.io/GVMBEditor</a><br> 另外，<code>十亿伏特 · 扩展</code>mod 中有 <a href="./../../expand/memory_banks/volatile_memory_banks.html#易失性存储器">易失版存储器</a>，无需初始化</p></blockquote><h2 id="导入导出" tabindex="-1">导入导出 <a class="header-anchor" href="#导入导出" aria-label="Permalink to &quot;导入导出&quot;">​</a></h2><h3 id="导出" tabindex="-1">导出 <a class="header-anchor" href="#导出" aria-label="Permalink to &quot;导出&quot;">​</a></h3><p>十亿伏特存储器保存和导出的格式均为无损 <a href="https://www.w3.org/TR/png/" target="_blank" rel="noreferrer">PNG</a> 图片，这是为存储远超原版的数据量，这也导致必须先设定好长、宽，而且之后不能修改，另外建议不要设置过大的长宽，因为每次修改数据后，存档时编码需耗费较长时间，导致卡顿</p><p>数据保存时，会按<code>ABGR</code>颜色模式保存到每个像素的颜色中，从高位到低位，分别为颜色的<span style="opacity:0.6;">Alpha 透明度通道</span>、<span style="color:blue;">Blue 蓝色通道</span>、<span style="color:green;">Green 绿色通道</span>、<span style="color:red;">Red 红色通道</span>，例如 <code>0xFFDD6655</code> 会被储存为透明度为 0xFF，蓝色为 <span style="color:#0000DD;">0xDD</span>，绿色为 <span style="color:#006600;">0x66</span>，红色为 <span style="color:#550000;">0x55</span> 的像素 <span style="display:inline-block;width:1em;height:1em;vertical-align:middle;background-color:#5566DD;"></span></p>',9),u={class:"details custom-block"},b=e("summary",null,"🛠️ 电压颜色转换器",-1),_=t('<h3 id="导入-png-格式图片文件" tabindex="-1">导入 PNG 格式图片文件 <a class="header-anchor" href="#导入-png-格式图片文件" aria-label="Permalink to &quot;导入 PNG 格式图片文件&quot;">​</a></h3><p>导入的图片将按照<code>ABGR</code>颜色模式读取每一个像素存入存储器中，存储器的长宽将被图片的长宽覆盖</p><h3 id="导入-wav-格式音频文件" tabindex="-1">导入 WAV 格式音频文件 <a class="header-anchor" href="#导入-wav-格式音频文件" aria-label="Permalink to &quot;导入 WAV 格式音频文件&quot;">​</a></h3><p>具体要求为</p><ul><li>编码：PCM</li><li>声道数：2</li><li>采样率：8000 ~ 48000 Hz</li><li>采样深度：16位</li></ul><p>符合要求的 WAV 格式音频文件才能被导入，检测通过后将自动导入该文件的<code>data chunk</code>部分，例如<code>data chunk</code>有 6 个 16 位数据，分别为<code>0x0001</code>​<code>0x0002</code>​<code>0x3333</code>​<code>0x4567</code>​<code>0xBA98</code>​<code>0xCDEF</code>，存储器的数据将是：<code>0x00010002</code>​<code>0x33334567</code>​<code>0xBA98CDEF</code></p><blockquote><p>导入成功的数据，可配合 <a href="./sound_generator.html">声音发生器</a> 使用</p></blockquote><h3 id="导入其他文件" tabindex="-1">导入其他文件 <a class="header-anchor" href="#导入其他文件" aria-label="Permalink to &quot;导入其他文件&quot;">​</a></h3><p>将从开头直接 32 位、32 位……地读取数据并写入存储器中</p><blockquote><p>导入<code>UTF8</code>编码的文本文件，可配合 <a href="./sign.html">告示牌</a> 使用</p></blockquote>',10),w=JSON.parse('{"title":"存储器","description":"","frontmatter":{},"headers":[],"relativePath":"zh/base/shift/memory_bank.md","filePath":"zh/base/shift/memory_bank.md"}'),f={name:"zh/base/shift/memory_bank.md"},B=l({...f,setup(g){return(k,x)=>{const r=s("Badge");return d(),c("div",{"data-pagefind-body":!0},[e("h1",h,[a("存储器 "),o(r,{text:"v1.0",type:"info"}),a(),p]),m,e("details",u,[b,o(i)]),_])}}});export{w as __pageData,B as default};
