import{E as e,a as n,b as a,c as i,I as r}from"./chunks/ElectricConnectionTable.BmTUByVO.js";import{E as c}from"./chunks/ElectricElement.BefNTKrd.js";import{d as x,B as y,c as f,o as p,j as l,a3 as d,G as o,a as s,k as u}from"./chunks/framework.CM9Y3eBy.js";import"./chunks/locale.Exah1bWg.js";const m={id:"list-memory-bank",tabindex:"-1"},T=JSON.parse('{"title":"List Memory Bank","description":"","frontmatter":{},"headers":[],"relativePath":"en/expand/memory_banks/list_memory_bank.md","filePath":"en/expand/memory_banks/list_memory_bank.md"}'),b={name:"en/expand/memory_banks/list_memory_bank.md"},F=x({...b,setup(w){let h=[new e(n.Top,a.Output,i.Hide,[new r(1,32,"Output Data / Result","")],!1,!0),new e(n.Right,a.Input,i.Hide,[new r(1,32,"Right Index","")],!1,!0),new e(n.Bottom,a.Input,i.Hide,[new r(1,32,"Synchronous Operations, details are in the table below.","")],!1,!0),new e(n.Left,a.Input,i.Hide,[new r(1,32,"Left Index","")],!1,!0),new e(n.In,a.Input,i.Hide,[new r(1,32,"Input Data","")],!1,!0)];return(k,t)=>{const g=y("Badge");return p(),f("div",{"data-pagefind-body":!0},[l("h1",m,[t[0]||(t[0]=s("List Memory Bank ")),o(g,{text:"v1.0",type:"info"}),t[1]||(t[1]=s()),t[2]||(t[2]=l("a",{class:"header-anchor",href:"#list-memory-bank","aria-label":'Permalink to "List Memory Bank <Badge text="v1.0" type="info"/>"'},"​",-1))]),t[3]||(t[3]=d('<h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>It&#39;s similar to <a href="./../../base/shift/memory_bank.html">Memory Bank</a>, it can only store one row of data, but it has many useful functions. And it can be used without initialization.</p><p>The file saved to the save is an unprocessed binary file, which can be edited with a hex editor.<br> The exported file format is <code>.GBLMB</code>, which is essentially a <a href="https://support.pkware.com/pkzip/appnote" target="_blank" rel="noreferrer">ZIP</a> compressed file. It can be uncompressed and edited with a hex editor.</p><blockquote><p>In addition, it has <a href="./volatile_memory_banks.html#volatile-list-memory-bank">Volatile type</a>, which does not need initialization too.</p></blockquote><h2 id="ports-definition" tabindex="-1">Ports Definition <a class="header-anchor" href="#ports-definition" aria-label="Permalink to &quot;Ports Definition&quot;">​</a></h2>',5)),o(c,{imgAltPrefix:"List Memory Bank",connections:u(h),imgSrc:"/images/expand/memory_banks/GVListMemoryBankBlock.webp"},null,8,["connections"]),t[4]||(t[4]=d('<h2 id="synchronous-operations" tabindex="-1">Synchronous Operations <a class="header-anchor" href="#synchronous-operations" aria-label="Permalink to &quot;Synchronous Operations&quot;">​</a></h2><blockquote><p>Index stats at 0.</p></blockquote><table tabindex="0"><thead><tr><th style="text-align:center;">Voltage</th><th style="text-align:center;">Operation</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:center;">Not Connected</td><td style="text-align:center;">Async Read</td><td style="text-align:left;">When the bottom port is not connected, the top port will output the data at the right index (out of range outputs 0, same bellow.)</td></tr><tr><td style="text-align:center;">0 or<br>Others</td><td style="text-align:center;">None</td><td style="text-align:left;">When the voltage of the bottom port is 0 or other unspecified voltage, the output will be 0.<br>If the bottom port is connected to an element or wire, the List Memory Bank will be in synchronous operation mode. In this mode, only if the voltage of the bottom port changes, the operation will be executed.</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;">Read</td><td style="text-align:left;">Read the data at the right index, and output it to the top port.</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">Write</td><td style="text-align:left;">Write the back input within the range of the left and right index.<br>Note 1: Including the two index addresses, same bellow.<br>Note 2: If the left index is 0, only the right index address will be overwritten, same bellow.)</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">Insert</td><td style="text-align:left;">Insert the back input within the range of the left and right index, the count is the bigger index minus the smaller index, plus one.</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">Cut</td><td style="text-align:left;">Read the data at the right index, output it to the top port, and remove it.</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">Remove</td><td style="text-align:left;">Remove the data within the range of the left and right index.</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">Index</td><td style="text-align:left;">Find the first data equals to the back input within the range of the left and right index, and output the index to the top port.<br>Note 1: If no result, it outputs 0xFFFFFFFF.<br>Note 2: If the two index is both 0, it will find in all range.</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">Last Index</td><td style="text-align:left;">Find the last data equals to the back input within the range of the left and right index, and output the index to the top port.<br>Note 1: If no result, it outputs 0xFFFFFFFF.<br>Note 2: If the two index is both 0, it will find in all range.</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">Query &amp; Remove</td><td style="text-align:left;">Remove all data equals to the back input within the range of the left and right index, and output the removed count.</td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;">Count</td><td style="text-align:left;">Find the data equals to the back input within the range of the left and right index, and output the count.</td></tr><tr><td style="text-align:center;">10<br>(0xA)</td><td style="text-align:center;">Copy &amp; Paste</td><td style="text-align:left;">Copy the data at the right index and write it to the left index.<br>If the right index is 0, it will write 0, same bellow.</td></tr><tr><td style="text-align:center;">11<br>(0xB)</td><td style="text-align:center;">Copy &amp; Insert</td><td style="text-align:left;">Copy the data at the right index and insert it to the left index.</td></tr><tr><td style="text-align:center;">12<br>(0xC)</td><td style="text-align:center;">Reverse</td><td style="text-align:left;">Reverse the order of data within the range of the left and right index.</td></tr><tr><td style="text-align:center;">13<br>(0xD)</td><td style="text-align:center;">Ascending Order</td><td style="text-align:left;">Order the data within the range of the left and right index in ascending order.</td></tr><tr><td style="text-align:center;">14<br>(0xE)</td><td style="text-align:center;">Descending Order</td><td style="text-align:left;">Order the data within the range of the left and right index in descending order.</td></tr><tr><td style="text-align:center;">15<br>(0xF)</td><td style="text-align:center;">Data Count</td><td style="text-align:left;">Output the count of data currently stored.<br>Note: If you write data to a large index, the count will be large too.</td></tr><tr><td style="text-align:center;">16~31<br>(0x10~1F)</td><td style="text-align:center;">Left Binary Operation in Batch</td><td style="text-align:left;">Perform binary operation in batch within the range of the left and right index. The original data is the left value, the back input data is the right value, the operation methods from 16~31 are: add, subtract, multiply, divide, remainder, equal, greater than, no less than, less than, no greater than, maximum, minimum, left shift, right shift, power and logarithm (the left value is anti-logarithm, the right value is base).</td></tr><tr><td style="text-align:center;">32~47<br>(0x20~2F)</td><td style="text-align:center;">Right Binary Operation in Batch</td><td style="text-align:left;">This operation is like the operation above, but the original data is the right value, the back input data is the left value.</td></tr><tr><td style="text-align:center;">48~66<br>(0x30~42)</td><td style="text-align:center;">Unary Operation in Batch</td><td style="text-align:left;">Perform unary operation in batch within the range of the left and right index. The original data is the input value, the operation methods from 48~66 are: sin, cos, tan, cot, sec, csc, asin, acos, atan, sinh, cosh, tanh, sign magnitude, two&#39;s complement reverse.</td></tr><tr><td style="text-align:center;">256<br>(0x100)</td><td style="text-align:center;">Set Width</td><td style="text-align:left;">Set the width of data, which image display or terrain layer display reads, to the back input. The default value is 0.</td></tr><tr><td style="text-align:center;">257<br>(0x101)</td><td style="text-align:center;">Set Height</td><td style="text-align:left;">Set the height of data, which image display or terrain layer display reads, to the back input. The default value is 0.</td></tr><tr><td style="text-align:center;">258<br>(0x102)</td><td style="text-align:center;">Set Offset</td><td style="text-align:left;">Set the offset of data, which image display or terrain layer display reads, to the back input. The default value is 0. When the display reads data from this memory bank, it will ignore the first n data.</td></tr><tr><td style="text-align:center;">272<br>(0x110)</td><td style="text-align:center;">Get Width</td><td style="text-align:left;">Get the width you set, and output it to the top port.</td></tr><tr><td style="text-align:center;">273<br>(0x111)</td><td style="text-align:center;">Get Height</td><td style="text-align:left;">Get the height you set, and output it to the top port.</td></tr><tr><td style="text-align:center;">274<br>(0x112)</td><td style="text-align:center;">Get Offset</td><td style="text-align:left;">Get the offset you set, and output it to the top port.</td></tr></tbody></table>',3))])}}});export{T as __pageData,F as default};
