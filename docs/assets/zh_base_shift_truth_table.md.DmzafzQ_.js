import{_ as c,o as s,c as u,j as l,a as e,I as a,n as o,a5 as d,D as _,aD as i}from"./chunks/framework.CZYz2WcB.js";const h="_mono_table_body_pvtdw_3",r="_no_mono_pvtdw_8",b={mono_table_body:h,no_mono:r},hl=JSON.parse('{"title":"真值表","description":"","frontmatter":{},"headers":[],"relativePath":"zh/base/shift/truth_table.md","filePath":"zh/base/shift/truth_table.md"}'),p={name:"zh/base/shift/truth_table.md"},m={id:"真值表",tabindex:"-1"},f=l("a",{class:"header-anchor",href:"#真值表","aria-label":'Permalink to "真值表 <Badge text="v1.0" type="info"/>"'},"​",-1),y=d('<img src="'+i+'" alt="GV真值表 图示" class="center_image small"><p>包含表征逻辑事件输入和输出之间全部可能状态表格的元件，除了能像经典版一样根据指定的输入输出电压，还能编写表达式进行计算；该元件的端口定义与原版相同，不再复述</p><h2 id="计算表达式例子" tabindex="-1">计算表达式例子 <a class="header-anchor" href="#计算表达式例子" aria-label="Permalink to &quot;计算表达式例子&quot;">​</a></h2><p>此套规则的计算表达式基于 <a href="https://github.com/sklose/NCalc2" target="_blank" rel="noreferrer">NCalc2</a>，写法类似于 <a href="https://support.microsoft.com/zh-cn/office/excel-%E4%B8%AD%E7%9A%84%E5%85%AC%E5%BC%8F%E6%A6%82%E8%BF%B0-ecfdc708-9162-49e8-b993-c311f47ca173" target="_blank" rel="noreferrer">Excel公式</a>，请先看具体例子：</p><ul><li>表达式<code>1;2;3;4:5</code></li></ul>',5),C=l("thead",null,[l("tr",null,[l("th",null,"端口"),l("th",null,"上端"),l("th",null,"右端"),l("th",null,"下端"),l("th",null,"左端")])],-1),g=l("tbody",null,[l("tr",null,[l("td",null,"当前输入"),l("td",null,"= 1"),l("td",null,"= 2"),l("td",null,"= 3"),l("td",null,"= 4")]),l("tr",null,[l("td",null,"输出"),l("td",{colspan:"4"},"5")])],-1),A=[C,g],N=l("ul",null,[l("li",null,[e("表达式"),l("code",null,">0x1;<=0xA;i3>1&&i3<99:0xABC")])],-1),T=l("thead",null,[l("tr",null,[l("th",null,"端口"),l("th",null,"上端"),l("th",null,"右端"),l("th",null,"下端"),l("th",null,"左端")])],-1),x=l("tbody",null,[l("tr",null,[l("td",null,"当前输入"),l("td",null,"> 0x1"),l("td",null,"≤ 0xA"),l("td",null,"> 1 且 < 99"),l("td",null,"无要求")]),l("tr",null,[l("td",null,"输出"),l("td",{colspan:"4"},"0xABC")])],-1),$=[T,x],B=l("ul",null,[l("li",null,[e("表达式"),l("code",null,"0;0;0;0;;i2;true;>i1:10")])],-1),k=l("thead",null,[l("tr",null,[l("th",null,"端口"),l("th",null,"上端"),l("th",null,"右端"),l("th",null,"下端"),l("th",null,"左端")])],-1),E=l("tbody",null,[l("tr",null,[l("td",null,"上 1 轮输入"),l("td",null,"= 0"),l("td",null,"= 0"),l("td",null,"= 0"),l("td",null,"= 0")]),l("tr",null,[l("td",null,"当前输入"),l("td",null,"= 右端输入"),l("td",null,"任意值"),l("td",null,"> 上端输入"),l("td",null,"任意值")]),l("tr",null,[l("td",null,"输出"),l("td",{colspan:"4"},"10")])],-1),P=[k,E],v=l("ul",null,[l("li",null,[e("表达式"),l("code",null,"0;;1;;2;;3:4::5:6::7:8")])],-1),S=l("thead",null,[l("tr",null,[l("th",null,"规则组"),l("th",null,"端口"),l("th",null,"上端"),l("th",null,"右端"),l("th",null,"下端"),l("th",null,"左端")])],-1),V=l("td",{rowspan:"5"},"1",-1),q=l("td",null,"= 0",-1),w=l("td",null,"任意值",-1),D=l("td",null,"任意值",-1),I=l("td",null,"任意值",-1),M=l("tr",null,[l("td",null,"上 2 轮输入"),l("td",null,"= 1"),l("td",null,"任意值"),l("td",null,"任意值"),l("td",null,"任意值")],-1),z=l("tr",null,[l("td",null,"上 1 轮输入"),l("td",null,"= 2"),l("td",null,"任意值"),l("td",null,"任意值"),l("td",null,"任意值")],-1),R=l("tr",null,[l("td",null,"当前输入"),l("td",null,"= 3"),l("td",null,"任意值"),l("td",null,"任意值"),l("td",null,"任意值")],-1),F=l("tr",null,[l("td",null,"输出"),l("td",{colspan:"4"},"10")],-1),j=l("td",{rowspan:"2"},"2",-1),G=l("td",null,"= 5",-1),J=l("td",null,"任意值",-1),O=l("td",null,"任意值",-1),H=l("td",null,"任意值",-1),K=l("tr",null,[l("td",null,"输出"),l("td",{colspan:"4"},"6")],-1),L=l("td",{rowspan:"2"},"3",-1),Q=l("td",null,"= 6",-1),U=l("td",null,"任意值",-1),W=l("td",null,"任意值",-1),X=l("td",null,"任意值",-1),Y=l("tr",null,[l("td",null,"输出"),l("td",{colspan:"4"},"7")],-1),Z=l("ul",null,[l("li",null,[e("表达式"),l("code",null,"true;true;Min(i1,i2),Max(i1,i2):i1+i2"),e("输入1、2为任意值，输入3是输入1、输入2中的较小值，输入4是输入1、输入2中的较大值，则输出输入1+输入2")])],-1),ll=l("thead",null,[l("tr",null,[l("th",null,"端口"),l("th",null,"上端"),l("th",null,"右端"),l("th",null,"下端"),l("th",null,"左端")])],-1),tl=l("tbody",null,[l("tr",null,[l("td",null,"当前输入"),l("td",null,"任意值"),l("td",null,"任意值"),l("td",null,"= 上端输入 和 右端输入 中更小的"),l("td",null,"= 上端输入 和 右端输入 中更大的")]),l("tr",null,[l("td",null,"输出"),l("td",{colspan:"4"},"上端输入 + 右端输入")])],-1),ol=[ll,tl],el=d('<h2 id="具体规则" tabindex="-1">具体规则 <a class="header-anchor" href="#具体规则" aria-label="Permalink to &quot;具体规则&quot;">​</a></h2><p>通过以上例子，你可能已经对十亿伏特真值表表达式有了初步的认识，下面是具体规则</p><ul><li>4 个输入规则之间用英文分号<code>;</code>分隔，顺序为<code>上端</code>​<code>右端</code>​<code>下端</code>​<code>左端</code>，之后为表述方便，其输入分别称作为<code>输入 1</code>​<code>输入 2</code>​<code>输入 3</code>​<code>输入 4</code>，而其值在表达式中分别写作<code>i1</code>​<code>i2</code>​<code>i3</code>​<code>i4</code></li><li>如果输入 1、2 需要设定规则，输入 3、4 可以为任意值，则输入 3、4的规则可以省略不写，但也不能加上多余的<code>;</code></li><li>如果要给输入 1、3设定规则，而输入 2 可以为任意值，需要给输入 2 设定规则<code>true</code></li><li>如果输入规则的开头是<code>=</code>​<code>!=</code>​<code>&gt;</code>​<code>&lt;</code>这四种运算符之一，真值表会根据这是第几个输入，自动在开头加上<code>i1</code>​<code>i2</code>​<code>i3</code>​<code>i4</code>，当然你也可以自己加上</li><li>如果输入规则不是<code>true</code>，且不包含<code>=</code>​<code>!</code>​<code>not</code>​<code>&gt;</code>​<code>&lt;</code>​<code>and</code>​<code>&amp;&amp;</code>​<code>||</code>​<code>or</code>中的任意一个运算符，此Mod会自动在开头加上<code>i1=</code>​<code>i2=</code>​<code>i3=</code>​<code>i4=</code></li><li>使用两个英文分号<code>;;</code>来分隔时序，越左边时序越早，最右边的时序是现在的输入，最多取得15次轮之前的输入</li><li>每次输入发生变化时，轮次加 1</li><li>只有输入规则的计算结果是<code>true</code>时，才会计算下一个输入规则，然后计算下一组时序，直到所有规则计算结果均为<code>true</code>，才会输出此组规则设定的输出</li><li>使用英文冒号<code>:</code>来分隔输入规则和输出规则，输出规则的计算结果必须为自然数（&gt;=0的整数）</li><li>使用两个英文冒号<code>::</code>来分隔多组输入输出规则，当第一组规则不输出时，则计算下一组规则，直到有输出为止，不再计算下一组规则，最多 2<sup>32</sup>-1 组规则</li><li>过程中出现任何错误均会直接停止计算并输出 0 V，错误详见游戏日志</li><li>数字默认为十进制，如要使用十六进制数字，请在十六进制数字前加上<code>0x</code>，二进制则在其前面加上<code>0b</code>，非十进制时不支持小数点</li></ul><div class="warning custom-block github-alert"><p class="custom-block-title">⚠ 注意</p><p>规则对大小写敏感！</p></div><h2 id="关于-ncalc" tabindex="-1">关于 NCalc <a class="header-anchor" href="#关于-ncalc" aria-label="Permalink to &quot;关于 NCalc&quot;">​</a></h2><p>如果想了解更多有关 NCalc 的信息，可阅读：</p><ul><li><a href="./ncalc/operators.html">NCalc 运算符</a> <code>= &gt; &lt; + - * /</code>等</li><li><a href="./ncalc/functions.html">NCalc 函数</a> <code>if Max Sin</code>等<br> 其中三角函数的输入应为弧度，本 mod 额外提供<code>Atan2 Cosh Sinh Tanh</code>，此类函数计算过程中会先将数字转换为双精度浮点数，再进行计算，而且过程中保留小数，输出时会自动去除小数部分<br> 另外，<code>Round</code>使用两个参数会得出奇怪结果，本 mod 未能解决</li><li><a href="./ncalc/values.html">NCalc 数值</a> <code>9876 1.23e9 true false</code>等<br> 额外提供<code>PI() E()</code>来获取圆周率π、自然常数e</li></ul>',7);function dl(t,cl,sl,ul,al,_l){const n=_("Badge");return s(),u("div",{"data-pagefind-body":!0},[l("h1",m,[e("真值表 "),a(n,{text:"v1.0",type:"info"}),e(),f]),y,l("table",{class:o(t.$style.mono_table_body)},A,2),N,l("table",{class:o(t.$style.mono_table_body)},$,2),B,l("table",{class:o(t.$style.mono_table_body)},P,2),v,l("table",{class:o(t.$style.mono_table_body)},[S,l("tbody",null,[l("tr",null,[V,l("td",{class:o(t.$style.no_mono)},"上 3 轮输入",2),q,w,D,I]),M,z,R,F,l("tr",null,[j,l("td",{class:o(t.$style.no_mono)},"当前输入",2),G,J,O,H]),K,l("tr",null,[L,l("td",{class:o(t.$style.no_mono)},"当前输入",2),Q,U,W,X]),Y])],2),Z,l("table",{class:o(t.$style.mono_table_body)},ol,2),el])}const nl={$style:b},rl=c(p,[["render",dl],["__cssModules",nl]]);export{hl as __pageData,rl as default};
